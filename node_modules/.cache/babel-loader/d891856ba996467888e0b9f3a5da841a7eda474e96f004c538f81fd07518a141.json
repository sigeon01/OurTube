{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jky98\\\\react-app2\\\\src\\\\components\\\\TOC.js\";\n// React의 Component 클래스를 가져옵니다.\nimport { Component } from \"react\";\n\n// 'TOC' (Table of Contents)라는 이름의 클래스 기반 컴포넌트를 정의합니다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass TOC extends Component {\n  // render 메서드는 컴포넌트가 화면에 렌더링 될 내용을 반환합니다.\n  render() {\n    // 리스트 아이템들을 담을 빈 배열을 생성합니다.\n    var lists = [];\n    // 부모 컴포넌트로부터 전달받은 data props를 로컬 변수에 할당합니다.\n    var data = this.props.data;\n    // while 루프를 사용하여 data 배열의 각 항목에 대해 리스트 아이템을 생성합니다.\n    var i = 0;\n    while (i < data.length) {\n      // lists 배열에 <li> 요소를 push합니다.\n      lists.push(\n      /*#__PURE__*/\n      // 각 <li> 요소에는 고유한 key prop이 필요합니다. 여기서는 각 데이터의 id를 key로 사용합니다.\n      _jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/content/\" + data[i].id // href 속성은 클릭했을 때 이동할 URL을 지정합니다.\n          ,\n          \"data-id\": data[i].id // data-id 속성을 사용하여 각 링크에 고유한 ID를 부여합니다.\n          ,\n          onClick: function (e) {\n            e.preventDefault(); // 기본 이벤트를 취소합니다. 여기서는 페이지가 다시 로드되는 것을 방지합니다.\n            // 부모 컴포넌트로부터 전달받은 onChangePage 함수를 호출합니다.\n            // e.target.dataset.id를 통해 클릭된 요소의 data-id 값을 얻습니다.\n            this.props.onChangePage(e.target.dataset.id);\n          }.bind(this) // onClick 핸들러 내부에서 this가 컴포넌트 인스턴스를 가리키도록 bind 함수를 사용합니다.\n          ,\n          children: data[i].title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this)\n      }, data[i].id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this));\n      i = i + 1; // 인덱스를 증가시켜 다음 항목으로 이동합니다.\n    }\n\n    // 최종적으로, 모든 리스트 아이템들을 포함하는 <nav> 요소를 반환합니다.\n    return /*#__PURE__*/_jsxDEV(\"nav\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: lists\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// TOC 컴포넌트를 export 하여 다른 파일에서 import하여 사용할 수 있도록 합니다.\nexport default TOC;","map":{"version":3,"names":["Component","jsxDEV","_jsxDEV","TOC","render","lists","data","props","i","length","push","children","href","id","onClick","e","preventDefault","onChangePage","target","dataset","bind","title","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/jky98/react-app2/src/components/TOC.js"],"sourcesContent":["// React의 Component 클래스를 가져옵니다.\nimport { Component } from \"react\";\n\n// 'TOC' (Table of Contents)라는 이름의 클래스 기반 컴포넌트를 정의합니다.\nclass TOC extends Component {\n  // render 메서드는 컴포넌트가 화면에 렌더링 될 내용을 반환합니다.\n  render() {\n    // 리스트 아이템들을 담을 빈 배열을 생성합니다.\n    var lists = [];\n    // 부모 컴포넌트로부터 전달받은 data props를 로컬 변수에 할당합니다.\n    var data = this.props.data;\n    // while 루프를 사용하여 data 배열의 각 항목에 대해 리스트 아이템을 생성합니다.\n    var i = 0;\n    while (i < data.length) {\n      // lists 배열에 <li> 요소를 push합니다.\n      lists.push(\n        // 각 <li> 요소에는 고유한 key prop이 필요합니다. 여기서는 각 데이터의 id를 key로 사용합니다.\n        <li key={data[i].id}>\n          <a\n            href={\"/content/\" + data[i].id} // href 속성은 클릭했을 때 이동할 URL을 지정합니다.\n            data-id={data[i].id} // data-id 속성을 사용하여 각 링크에 고유한 ID를 부여합니다.\n            onClick={function (e) {\n              e.preventDefault(); // 기본 이벤트를 취소합니다. 여기서는 페이지가 다시 로드되는 것을 방지합니다.\n              // 부모 컴포넌트로부터 전달받은 onChangePage 함수를 호출합니다.\n              // e.target.dataset.id를 통해 클릭된 요소의 data-id 값을 얻습니다.\n              this.props.onChangePage(e.target.dataset.id);\n            }.bind(this)} // onClick 핸들러 내부에서 this가 컴포넌트 인스턴스를 가리키도록 bind 함수를 사용합니다.\n          >\n            {/* data 배열의 현재 항목의 title 값을 링크 텍스트로 사용합니다.*/}\n            {data[i].title}\n          </a>\n        </li>,\n      );\n      i = i + 1; // 인덱스를 증가시켜 다음 항목으로 이동합니다.\n    }\n\n    // 최종적으로, 모든 리스트 아이템들을 포함하는 <nav> 요소를 반환합니다.\n    return (\n      <nav>\n        <ul>{lists}</ul>\n      </nav>\n    );\n  }\n}\n\n// TOC 컴포넌트를 export 하여 다른 파일에서 import하여 사용할 수 있도록 합니다.\nexport default TOC;\n"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAQ,OAAO;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,GAAG,SAASH,SAAS,CAAC;EAC1B;EACAI,MAAMA,CAAA,EAAG;IACP;IACA,IAAIC,KAAK,GAAG,EAAE;IACd;IACA,IAAIC,IAAI,GAAG,IAAI,CAACC,KAAK,CAACD,IAAI;IAC1B;IACA,IAAIE,CAAC,GAAG,CAAC;IACT,OAAOA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE;MACtB;MACAJ,KAAK,CAACK,IAAI;MAAA;MACR;MACAR,OAAA;QAAAS,QAAA,eACET,OAAA;UACEU,IAAI,EAAE,WAAW,GAAGN,IAAI,CAACE,CAAC,CAAC,CAACK,EAAG,CAAC;UAAA;UAChC,WAASP,IAAI,CAACE,CAAC,CAAC,CAACK,EAAG,CAAC;UAAA;UACrBC,OAAO,EAAE,UAAUC,CAAC,EAAE;YACpBA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;YACpB;YACA;YACA,IAAI,CAACT,KAAK,CAACU,YAAY,CAACF,CAAC,CAACG,MAAM,CAACC,OAAO,CAACN,EAAE,CAAC;UAC9C,CAAC,CAACO,IAAI,CAAC,IAAI,CAAE,CAAC;UAAA;UAAAT,QAAA,EAGbL,IAAI,CAACE,CAAC,CAAC,CAACa;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb;MAAC,GAbGnB,IAAI,CAACE,CAAC,CAAC,CAACK,EAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAcf,CACN,CAAC;MACDjB,CAAC,GAAGA,CAAC,GAAG,CAAC,CAAC,CAAC;IACb;;IAEA;IACA,oBACEN,OAAA;MAAAS,QAAA,eACET,OAAA;QAAAS,QAAA,EAAKN;MAAK;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC;EAEV;AACF;;AAEA;AACA,eAAetB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}