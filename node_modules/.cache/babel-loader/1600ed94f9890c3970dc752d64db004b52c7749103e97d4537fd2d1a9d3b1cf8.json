{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jky98\\\\react-app2\\\\src\\\\components\\\\Subject.js\";\n// React의 Component 클래스를 가져옵니다.\nimport { Component } from \"react\";\n\n// 'Subject'라는 이름의 클래스 기반 컴포넌트를 정의합니다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Subject extends Component {\n  // render 메서드는 컴포넌트가 화면에 렌더링 될 내용을 반환합니다.\n  render() {\n    // JSX를 반환합니다. 여기서는 header 요소를 사용하여 페이지의 헤더 부분을 구성합니다.\n    return (\n      /*#__PURE__*/\n      // header 태그는 웹 페이지나 섹션의 헤더를 나타냅니다.\n      _jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/\" // href 속성은 클릭했을 때 이동할 URL을 지정합니다.\n            ,\n            onClick: function (e) {\n              e.preventDefault(); // 기본 이벤트를 취소합니다. 여기서는 페이지가 다시 로드되는 것을 방지합니다.\n              this.props.onChangePage(); // 부모 컴포넌트로부터 전달받은 onChangePage 함수를 호출합니다.\n            }.bind(this) // onClick 핸들러 내부에서 this가 컴포넌트 인스턴스를 가리키도록 bind 함수를 사용합니다.\n            ,\n            children: this.props.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 9\n        }, this), this.props.sub]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }, this)\n    );\n  }\n}\n\n// Subject 컴포넌트를 export 하여 다른 파일에서 import하여 사용할 수 있도록 합니다.\nexport default Subject;","map":{"version":3,"names":["Component","jsxDEV","_jsxDEV","Subject","render","children","href","onClick","e","preventDefault","props","onChangePage","bind","title","fileName","_jsxFileName","lineNumber","columnNumber","sub"],"sources":["C:/Users/jky98/react-app2/src/components/Subject.js"],"sourcesContent":["// React의 Component 클래스를 가져옵니다.\nimport { Component } from \"react\";\n\n// 'Subject'라는 이름의 클래스 기반 컴포넌트를 정의합니다.\nclass Subject extends Component {\n  // render 메서드는 컴포넌트가 화면에 렌더링 될 내용을 반환합니다.\n  render() {\n    // JSX를 반환합니다. 여기서는 header 요소를 사용하여 페이지의 헤더 부분을 구성합니다.\n    return (\n      // header 태그는 웹 페이지나 섹션의 헤더를 나타냅니다.\n      <header>\n        {/* h1 태그는 페이지 타이틀을 위한 HTML 태그입니다. */}\n        <h1>\n          {/* a 태그는 하이퍼링크를 생성합니다.\n          여기서는 클릭 이벤트를 처리하기 위한 onClick 이벤트 핸들러를 정의하고 있습니다. */}\n          <a\n            href=\"/\" // href 속성은 클릭했을 때 이동할 URL을 지정합니다.\n            onClick={function (e) {\n              e.preventDefault(); // 기본 이벤트를 취소합니다. 여기서는 페이지가 다시 로드되는 것을 방지합니다.\n              this.props.onChangePage(); // 부모 컴포넌트로부터 전달받은 onChangePage 함수를 호출합니다.\n            }.bind(this)} // onClick 핸들러 내부에서 this가 컴포넌트 인스턴스를 가리키도록 bind 함수를 사용합니다.\n          >\n            {/* this.props.title을 사용하여 부모 컴포넌트로부터 전달받은 title 값을 표시합니다. */}\n            {this.props.title}\n          </a>\n        </h1>\n        {/* 부모 컴포넌트로부터 전달받은 sub 프로퍼티를 화면에 표시합니다. */}\n        {this.props.sub}\n      </header>\n    );\n  }\n}\n\n// Subject 컴포넌트를 export 하여 다른 파일에서 import하여 사용할 수 있도록 합니다.\nexport default Subject;\n"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAQ,OAAO;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,SAASH,SAAS,CAAC;EAC9B;EACAI,MAAMA,CAAA,EAAG;IACP;IACA;MAAA;MACE;MACAF,OAAA;QAAAG,QAAA,gBAEEH,OAAA;UAAAG,QAAA,eAGEH,OAAA;YACEI,IAAI,EAAC,GAAG,CAAC;YAAA;YACTC,OAAO,EAAE,UAAUC,CAAC,EAAE;cACpBA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;cACpB,IAAI,CAACC,KAAK,CAACC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC7B,CAAC,CAACC,IAAI,CAAC,IAAI,CAAE,CAAC;YAAA;YAAAP,QAAA,EAGb,IAAI,CAACK,KAAK,CAACG;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChB;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC,EAEJ,IAAI,CAACP,KAAK,CAACQ,GAAG;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT;IAAC;EAEb;AACF;;AAEA;AACA,eAAed,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}